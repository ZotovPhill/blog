# Generated by Django 3.1 on 2021-03-10 19:34

import django.contrib.auth.validators
import django.core.files.storage
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Ability',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(default='default')),
            ],
            options={
                'db_table': 'acl_ability',
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(default='djangodbmodelsfieldscharfield', max_length=255, unique=True)),
                ('is_private', models.BooleanField(default=False, serialize=False)),
                ('password', models.CharField(max_length=128, null=True, serialize=False)),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('last_access', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'blg_blog',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('is_temp', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'fl_file',
            },
        ),
        migrations.CreateModel(
            name='FileReference',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('mime_type', models.CharField(max_length=255)),
                ('extension', models.CharField(max_length=255)),
                ('uploaded_at', models.DateTimeField(auto_now=True)),
                ('storage_file', models.FileField(storage=django.core.files.storage.FileSystemStorage(location='/opt/project/api/media/public'), upload_to='')),
            ],
            options={
                'db_table': 'fl_file_reference',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('code', models.CharField(max_length=255)),
                ('abilities', models.ManyToManyField(to='blog.Ability')),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.blog')),
            ],
            options={
                'db_table': 'acl_role',
                'unique_together': {('blog', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(allow_unicode=True, help_text='The name of the page as it will appear in URLs e.g http://domain.com/profile/[my-slug]/', max_length=255, unique=True)),
            ],
            options={
                'db_table': 'blg_tag',
            },
        ),
        migrations.CreateModel(
            name='Visibility',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('object_id', models.CharField(max_length=255)),
                ('object_class', models.CharField(max_length=255)),
                ('employees', models.CharField(help_text='Empty value means public,\n                    single value for private access only,\n                    and list of ids for limited access to object.', max_length=1000, validators=[django.core.validators.int_list_validator])),
            ],
            options={
                'db_table': 'acl_visibility',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('roles', models.ManyToManyField(to='blog.Role')),
            ],
            options={
                'db_table': 'pa_user',
            },
        ),
        migrations.CreateModel(
            name='PostContent',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('external_link', models.CharField(blank=True, max_length=255, validators=[django.core.validators.URLValidator])),
                ('file', models.ManyToManyField(to='blog.File')),
                ('type', models.CharField(choices=[('LIST', 'List'), ('REVIEW', 'Review'), ('GALLERY', 'Gallery'), ('SHORT_POST', 'Short_Post'), ('NEWS', 'News'), ('EXTERNAL_RESOURCE', 'External_Resource'), ('LONG_READ', 'Long_Read')], default='SHORT_POST', max_length=255)),
            ],
            options={
                'db_table': 'blg_post_content',
            },
        ),
        migrations.AddField(
            model_name='file',
            name='author',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.user'),
        ),
        migrations.AddField(
            model_name='file',
            name='file_reference',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.filereference'),
        ),
        migrations.AddField(
            model_name='file',
            name='status',
            field=models.CharField(choices=[('FAILED', 'Failed'), ('DELETED', 'Deleted'), ('UPLOADED', 'Uploaded'), ('UPLOADING', 'Uploading'), ('NEW', 'New')], default='NEW', max_length=255),
        ),
        migrations.AddField(
            model_name='file',
            name='type',
            field=models.CharField(choices=[('IMAGE', 'Image'), ('DOCUMENT', 'Document'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('PHOTO', 'Photo')], default='IMAGE', max_length=255),
        ),
        migrations.AddField(
            model_name='file',
            name='visibility',
            field=models.CharField(choices=[('PUBLIC', 'Public'), ('LIMITED', 'Limited'), ('PRIVATE', 'Private')], default='PUBLIC', max_length=255),
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=255, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()])),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('slug', models.SlugField(allow_unicode=True, help_text='The name of the page as it will appear in URLs e.g http://domain.com/profile/[my-slug]/', max_length=255)),
                ('photo', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='blog.file')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='blog.user')),
            ],
            options={
                'db_table': 'pa_profile',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slug', models.SlugField(allow_unicode=True, help_text='The name of the page as it will appear in URLs e.g http://domain.com/profile/[my-slug]/', max_length=255, unique=True)),
                ('status', models.CharField(choices=[('DELETED', 'DELETED'), ('DRAFT', 'Draft'), ('POSTED', 'Posted'), ('ARCHIVED', 'Archived'), ('NEW', 'New')], default='NEW', max_length=255)),
                ('visibility', models.CharField(choices=[('PUBLIC', 'Public'), ('LIMITED', 'Limited'), ('PRIVATE', 'Private')], default='PUBLIC', max_length=255)),
                ('published_at', models.DateTimeField(null=True)),
                ('blog', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.blog')),
                ('content', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='blog.postcontent')),
                ('tags', models.ManyToManyField(to='blog.Tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.user')),
            ],
            options={
                'db_table': 'blg_post',
            },
        ),
    ]
